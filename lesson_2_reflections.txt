What happens when you initialize a repository? Why do you need to do it?
	It creates a .git folder where all the commits (changes and descriptions) will be saved.
	You need to do it to start using git in a specified folder.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	It does not is a commit, you can't see it in git log. So it is just a intermediate state.
	It helps you to choose what files to save in a new commit.

How can you use the staging area to make sure you have one commit per logical change?
	Just add one file to the staging area and commit just that file.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When you want to test something new for a long before implementing this on the core project
	It can be helpful to make that changes without toching the core project. Just make it in a copy of that.
	It's a good idea to have a core bracnh "that always work", that is being shared to others, then a 
	development branch, to introduce new features.

How do the diagrams help you visualize the branch structure?
	Help you to read changes over history, and new branches you have created over there.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	There will be created a new commit that include the results of the two branchs merged.
	We represent it that way, because the new commit has information of both parents.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Merging automatically is very fast and does not requiere extra work, but it maybe break you code.
	On the other hand, doing it manually can be tedious, especially if there has been so much changes.
